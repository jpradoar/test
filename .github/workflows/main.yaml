name: main-test
on:
  push:
    branches:
      - main

env:
  REPO_APP: 'noname-file5'
  SLACK_CHANNEL: 'builds-and-ci'
  SLACK_MSG_COLOR: '#0092ff'
  BUILD_CONTEXT: './none'
  COMMITER_NAME: 'AutoCommit'
  VULN_SEVERITY: 'CRITICAL,HIGH'
  VULN_TYPE: 'os,library'
  VULN_FORMAT: 'table' 
  VULN_TIMEOUT_SCAN: '2m0s'
  VULN_EXIT_CODE: '0' # 0=pipeline continue  1=pipeline finish. 
  VULN_SCAN_SEND_SECURITY_TAB: false # false: only commit vuln-scan |   # true: no commit vuln-scan but send output to Github Security tab
  
jobs:
  Demo-job-test:
    runs-on: ubuntu-latest 
    permissions:
      contents: write # get the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status  
      
    
    steps:
     
    - uses: actions/checkout@v3

      # image-ref: 'jpradoar/mqtt-producer:1.1.2'
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'jpradoar/mqtt-dbwriter:1.1.1'
        #format: ${{ env.VULN_FORMAT }}
        format: ${{ env.VULN_SCAN_SEND_SECURITY_TAB == 'false' && 'table' || 'sarif' }}
        vuln-type: ${{ env.VULN_TYPE }}
        severity: ${{ env.VULN_SEVERITY }}
        timeout: ${{ env.VULN_TIMEOUT_SCAN }}
        output: './vuln_scans/${{ env.REPO_APP }}_vuln_scan.sarif'
        exit-code: ${{ env.VULN_EXIT_CODE }}
       
    - name: Upload Trivy scan file
      if: env.VULN_SCAN_SEND_SECURITY_TAB == 'false'
      uses: EndBug/add-and-commit@v9
      with:
        message: 'AutoCommit: Add table file'
        add: './vuln_scans/${{ env.REPO_APP }}_vuln_scan.sarif'


    - name: Check vulnerabilities and create GitHub issue if any found
      if: ${{ steps.trivy.outputs.exit_code == '0' }}  # Verifica si Trivy se ejecutó con éxito
      run: |
        vulnerabilities=$(cat './vuln_scans/${{ env.REPO_APP }}_vuln_scan.txt')
        if [[ -n "$vulnerabilities" ]]; then
          echo "Vulnerabilities found:"
          echo "$vulnerabilities"
          echo "Creating GitHub issue..."
          # Crea un issue en GitHub informando sobre las vulnerabilidades encontradas
          # Podria usar la API git o un action como actions/github-script para esto
          echo "::set-output name=create_issue::true"
        else
          echo "No vulnerabilities found."
          echo "::set-output name=create_issue::false"
        fi

    - name: Create GitHub issue
      if: ${{ steps.trivy.outputs.exit_code == '0' && steps.create_issue == 'true' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issueTitle = 'Vulnerabilities found in the latest scan';
          const issueBody = `Trivy found vulnerabilities in the latest scan:

          \`\`\`
          ${process.env.REPO_APP}_vuln_scan.txt
          \`\`\`

          Please review and take necessary actions.`;
          const octokit = require('@octokit/rest')();
          octokit.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody
          });



    # If you prefere, can enable it and send scan to  GitHub Security tab
    # Remember that require use VULN_FORMAT: 'sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      if: env.VULN_SCAN_SEND_SECURITY_TAB == 'true'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: './vuln_scans/${{ env.REPO_APP }}_vuln_scan.sarif'
