name: TERRAFORM VALIDATION
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-validation.yaml'

jobs:
  tf-validation:
    runs-on: ubuntu-latest 
    permissions:
      contents: write # get the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status  
      issues: write # to create new issues in workflows
      pull-requests: write
      
    
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Install docker-compose
      run: |
          sudo apt-get install docker-compose -y &> /dev/null

    - name: Run localstack
      run: |
          docker-compose up -d && sleep 5

    - name: Test localstack
      run: |
        export AWS_ACCESS_KEY_ID=test
        export AWS_SECRET_ACCESS_KEY=test
        export AWS_DEFAULT_REGION=us-east-1
        export AWS_ENDPOINT_URL=http://localhost:4566
        aws --endpoint-url=$AWS_ENDPOINT_URL s3 mb s3://super-duper-bucket
        aws --endpoint-url=$AWS_ENDPOINT_URL s3 ls

    - name: Terraform fmt
      id: fmt
      continue-on-error: true
      run: terraform -chdir=terraform/ fmt -check
      
    - name: Terraform Init
      id: init
      run: terraform -chdir=terraform/ init -input=false

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=terraform/ validate -no-color

    - name: Terraform make a test
      run: |
        terraform -chdir=terraform/ test

    - name: Run terraform vuln scan
      continue-on-error: true
      run: |
        docker run --rm -v $GITHUB_WORKSPACE/terraform:/data  tenable/terrascan scan -t aws --find-vuln -d /data

    - name: Terraform Plan
      id: plan
      run: terraform -chdir=terraform/ plan -no-color -input=false
      
    - name: Backup original provider.tf
      run: |
        cp -rp ./terraform/provider.tf ./terraform/provider.tf_bkp

    - name: create fake provider.tf
      run: |
        cat <<EOF > ./terraform/provider.tf
        terraform {
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "~> 5.92.0"
            }
          }
        }
        provider "aws" {
          region     = var.aws_region
          access_key = "test"
          secret_key = "test"
          skip_credentials_validation = true
          skip_metadata_api_check     = true
          skip_requesting_account_id  = true
          endpoints {
            acm            = "http://localhost:4566"
            eks            = "http://localhost:4566"
            apigateway     = "http://localhost:4566"
            cloudformation = "http://localhost:4566"
            cloudwatch     = "http://localhost:4566"
            dynamodb       = "http://localhost:4566"
            es             = "http://localhost:4566"
            firehose       = "http://localhost:4566"
            iam            = "http://localhost:4566"
            kinesis        = "http://localhost:4566"
            lambda         = "http://localhost:4566"
            route53        = "http://localhost:4566"
            redshift       = "http://localhost:4566"
            s3             = "http://localhost:4566"
            secretsmanager = "http://localhost:4566"
            ses            = "http://localhost:4566"
            sns            = "http://localhost:4566"
            sqs            = "http://localhost:4566"
            ssm            = "http://localhost:4566"
            stepfunctions  = "http://localhost:4566"
            sts            = "http://localhost:4566"
            rds            = "http://localhost:4566"
            ec2            = "http://localhost:4566"
          }
        }
        EOF

    - name: Terraform apply 
      run: |
        terraform -chdir=terraform/ apply --auto-approve

    - name: remove .terraform files
      run: |
        rm -rf ./terraform/.terraform* ./terraform/terraform.tfstate*


    - name: Configure Git
      if: success()
      run: |
        git config --global user.name "(PR) AutoCommit"
        git config --global user.email "github-actions@github.com"

    - name: Create new branch
      if: success()
      run: |
        git checkout -b terraform-changes

    - name: Commit and Push changes
      if: success()
      run: |
        git add --all
        git commit -m "Automated changes after Terraform apply" || echo "No changes to commit"
        git push origin terraform-changes || echo "Branch already exists"

    - name: Create Pull Request
      if: success()
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: terraform-changes
        base: main
        title: "Automated Terraform Changes"
        body: "This PR contains changes generated automatically after Terraform apply successfully."
