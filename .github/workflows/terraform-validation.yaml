name: TERRAFORM VALIDATION
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-validation.yaml'

jobs:
  tf-validation:
    runs-on: ubuntu-latest 
    permissions:
      contents: write # get the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status  
      issues: write # to create new issues in workflows
      pull-requests: write
      
    
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Install docker-compose
      run: |
          sudo apt-get install docker-compose -y 


    - name: Run localstack
      run: |
        docker-compose up -d 


    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -input=false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color


    - name: Terraform make a test
      run: |
        terraform test


    - name: Run terraform vuln scan
      run: |
        docker run --rm -it -v $PWD/:/data  tenable/terrascan scan -t aws --find-vuln -d /data


    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true


    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }



    - name: Backup original provider.tf
      run: |
        cp -rp provider.tf provider.tf_bkp


    - name: create fake provider.tf
      run: |
        cat <<EOF > provider.tf
        terraform {
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "~> 5.92.0"
            }
          }
        }
        provider "aws" {
          region     = var.aws_region
          access_key = "test"
          secret_key = "test"
          skip_credentials_validation = true
          skip_metadata_api_check     = true
          skip_requesting_account_id  = true
          endpoints {
            acm            = "http://localhost:4566"
            eks            = "http://localhost:4566"
            apigateway     = "http://localhost:4566"
            cloudformation = "http://localhost:4566"
            cloudwatch     = "http://localhost:4566"
            dynamodb       = "http://localhost:4566"
            es             = "http://localhost:4566"
            firehose       = "http://localhost:4566"
            iam            = "http://localhost:4566"
            kinesis        = "http://localhost:4566"
            lambda         = "http://localhost:4566"
            route53        = "http://localhost:4566"
            redshift       = "http://localhost:4566"
            s3             = "http://localhost:4566"
            secretsmanager = "http://localhost:4566"
            ses            = "http://localhost:4566"
            sns            = "http://localhost:4566"
            sqs            = "http://localhost:4566"
            ssm            = "http://localhost:4566"
            stepfunctions  = "http://localhost:4566"
            sts            = "http://localhost:4566"
            rds            = "http://localhost:4566"
            ec2            = "http://localhost:4566"
          }
        }
        EOF


    - name: Terraform apply 
      run: |
        terraform apply --auto-approve 


    - name: Restore original provider.tf
      run: |
        mv provider.tf_bkp provider.tf
